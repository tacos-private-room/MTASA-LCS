-- 
-- c_common.lua
--
		
---------------------------------------------------------------------------------------------------
-- global settings
---------------------------------------------------------------------------------------------------
LODSwitchDelta = 2500

---------------------------------------------------------------------------------------------------
-- material primitive functions
---------------------------------------------------------------------------------------------------
trianglelist = {}
trianglelist.cone = {
	{ 0, 0.5, 0, 0.5, 0 },{ 0.2485, 0.3536, 0.2496, 0.875, 0 },{ 0.3536, 0.3536, 0, 0.75, 0 },
	{ 0, 0.5, 0, 0.5, 0 },{ -0, 0.3535, 0.3536, 0, 0 },{ 0.2485, 0.3536, 0.2496, -0.125, 0 },
	{ 0, 0.5, 0, 0.5, 0 },{ -0.2485, 0.3536, 0.2496, 0.125, 0 },{ -0, 0.3535, 0.3536, 0, 0 },
	{ 0, 0.5, 0, 0.5, 0 },{ -0.3536, 0.3536, 0, 0.25, 0 },{ -0.2485, 0.3536, 0.2496, 0.125, 0 },
	{ 0, 0.5, 0, 0.5, 0 },{ -0.2485, 0.3536, -0.2496, 0.375, 0 },{ -0.3536, 0.3536, 0, 0.25, 0 },
	{ 0, 0.5, 0, 0.5, 0 },{ 0, 0.3535, -0.3536, 0.5, 0 },{ -0.2485, 0.3536, -0.2496, 0.375, 0 },
	{ 0, 0.5, 0, 0.5, 0 },{ 0.2485, 0.3536, -0.2496, 0.625, 0 },{ 0, 0.3535, -0.3536, 0.5, 0 },
	{ 0, 0.5, 0, 0.5, 0 },{ 0.3536, 0.3536, 0, 0.75, 0 },{ 0.2485, 0.3536, -0.2496, 0.625, 0 },
	{ 0.3536, 0.3536, 0, 0.75, 0 },{ 0, 0, 0, 0.5, 1 },{ 0, 0, 0, 0.5, 1 },
	{ 0.3536, 0.3536, 0, 0.75, 0 },{ 0.2485, 0.3536, 0.2496, 0.875, 0 },{ 0, 0, 0, 0.5, 1 },
	{ 0.2485, 0.3536, 0.2496, 0.875, 0 },{ 0, 0, 0, 0.5, 1 },{ 0, 0, 0, 0.5, 1 },
	{ 0.2485, 0.3536, 0.2496, -0.125, 0 },{ -0, 0.3535, 0.3536, 0, 0 },{ 0, 0, 0, 0.5, 1 },
	{ -0, 0.3535, 0.3536, 0, 0 },{ 0, 0, 0, 0.5, 1 },{ 0, 0, 0, 0.5, 1 },
	{ -0, 0.3535, 0.3536, 0, 0 },{ -0.2485, 0.3536, 0.2496, 0.125, 0 },{ 0, 0, 0, 0.5, 1 },
	{ -0.2485, 0.3536, 0.2496, 0.125, 0 },{ 0, 0, 0, 0.5, 1 },{ 0, 0, 0, 0.5, 1 },
	{ -0.2485, 0.3536, 0.2496, 0.125, 0 },{ -0.3536, 0.3536, 0, 0.25, 0 },{ 0, 0, 0, 0.5, 1 },
	{ -0.3536, 0.3536, 0, 0.25, 0 },{ 0, 0, 0, 0.5, 1 },{ 0, 0, 0, 0.5, 1 },
	{ -0.3536, 0.3536, 0, 0.25, 0 },{ -0.2485, 0.3536, -0.2496, 0.375, 0 },{ 0, 0, 0, 0.5, 1 },
	{ -0.2485, 0.3536, -0.2496, 0.375, 0 },{ 0, 0, 0, 0.5, 1 },{ 0, 0, 0, 0.5, 1 },
	{ -0.2485, 0.3536, -0.2496, 0.375, 0 },{ 0, 0.3535, -0.3536, 0.5, 0 },{ 0, 0, 0, 0.5, 1 },
	{ 0, 0.3535, -0.3536, 0.5, 0 },{ 0, 0, 0, 0.5, 1 },{ 0, 0, 0, 0.5, 1 },
	{ 0, 0.3535, -0.3536, 0.5, 0 },{ 0.2485, 0.3536, -0.2496, 0.625, 0 },{ 0, 0, 0, 0.5, 1 },
	{ 0.2485, 0.3536, -0.2496, 0.625, 0 },{ 0, 0, 0, 0.5, 1 },{ 0, 0, 0, 0.5, 1 },
	{ 0.2485, 0.3536, -0.2496, 0.625, 0 },{ 0.3536, 0.3536, 0, 0.75, 0 },{ 0, 0, 0, 0.5, 1 }
}

trianglelist.sphere = {
	{ 0, 0, 0.5, 0, 1 },{ -0, 0.3536, 0.3536, 0, 0.75 },{ -0.25, 0.25, 0.3536, 0.125, 0.75 },
	{ 0, 0, 0.5, 0.125, 1 },{ -0.25, 0.25, 0.3536, 0.125, 0.75 },{ -0.3536, -0, 0.3536, 0.25, 0.75 },
	{ 0, 0, 0.5, 0.25, 1 },{ -0.3536, -0, 0.3536, 0.25, 0.75 },{ -0.25, -0.25, 0.3536, 0.375, 0.75 },
	{ 0, 0, 0.5, 0.375, 1 },{ -0.25, -0.25, 0.3536, 0.375, 0.75 },{ 0, -0.3536, 0.3536, 0.5, 0.75 },
	{ 0, 0, 0.5, 0.5, 1 },{ 0, -0.3536, 0.3536, 0.5, 0.75 },{ 0.25, -0.25, 0.3536, 0.625, 0.75 },
	{ 0, 0, 0.5, 0.625, 1 },{ 0.25, -0.25, 0.3536, 0.625, 0.75 },{ 0.3536, -0, 0.3536, 0.75, 0.75 },
	{ 0, 0, 0.5, 0.75, 1 },{ 0.3536, -0, 0.3536, 0.75, 0.75 },{ 0.25, 0.25, 0.3536, 0.875, 0.75 },
	{ 0, 0, 0.5, 0.875, 1 },{ 0.25, 0.25, 0.3536, 0.875, 0.75 },{ -0, 0.3536, 0.3536, 1, 0.75 },
	{ -0, 0.3536, 0.3536, 0, 0.75 },{ -0, 0.5, -0, 0, 0.5 },{ -0.3536, 0.3536, -0, 0.125, 0.5 },
	{ -0, 0.3536, 0.3536, 0, 0.75 },{ -0.3536, 0.3536, -0, 0.125, 0.5 },{ -0.25, 0.25, 0.3536, 0.125, 0.75 },
	{ -0.25, 0.25, 0.3536, 0.125, 0.75 },{ -0.3536, 0.3536, -0, 0.125, 0.5 },{ -0.5, -0, -0, 0.25, 0.5 },
	{ -0.25, 0.25, 0.3536, 0.125, 0.75 },{ -0.5, -0, -0, 0.25, 0.5 },{ -0.3536, -0, 0.3536, 0.25, 0.75 },
	{ -0.3536, -0, 0.3536, 0.25, 0.75 },{ -0.5, -0, -0, 0.25, 0.5 },{ -0.3536, -0.3536, -0, 0.375, 0.5 },
	{ -0.3536, -0, 0.3536, 0.25, 0.75 },{ -0.3536, -0.3536, -0, 0.375, 0.5 },{ -0.25, -0.25, 0.3536, 0.375, 0.75 },
	{ -0.25, -0.25, 0.3536, 0.375, 0.75 },{ -0.3536, -0.3536, -0, 0.375, 0.5 },{ 0, -0.5, -0, 0.5, 0.5 },
	{ -0.25, -0.25, 0.3536, 0.375, 0.75 },{ 0, -0.5, -0, 0.5, 0.5 },{ 0, -0.3536, 0.3536, 0.5, 0.75 },
	{ 0, -0.3536, 0.3536, 0.5, 0.75 },{ 0, -0.5, -0, 0.5, 0.5 },{ 0.3536, -0.3536, -0, 0.625, 0.5 },
	{ 0, -0.3536, 0.3536, 0.5, 0.75 },{ 0.3536, -0.3536, -0, 0.625, 0.5 },{ 0.25, -0.25, 0.3536, 0.625, 0.75 },
	{ 0.25, -0.25, 0.3536, 0.625, 0.75 },{ 0.3536, -0.3536, -0, 0.625, 0.5 },{ 0.5, -0, -0, 0.75, 0.5 },
	{ 0.25, -0.25, 0.3536, 0.625, 0.75 },{ 0.5, -0, -0, 0.75, 0.5 },{ 0.3536, -0, 0.3536, 0.75, 0.75 },
	{ 0.3536, -0, 0.3536, 0.75, 0.75 },{ 0.5, -0, -0, 0.75, 0.5 },{ 0.3536, 0.3536, -0, 0.875, 0.5 },
	{ 0.3536, -0, 0.3536, 0.75, 0.75 },{ 0.3536, 0.3536, -0, 0.875, 0.5 },{ 0.25, 0.25, 0.3536, 0.875, 0.75 },
	{ 0.25, 0.25, 0.3536, 0.875, 0.75 },{ 0.3536, 0.3536, -0, 0.875, 0.5 },{ -0, 0.5, -0, 1, 0.5 },
	{ 0.25, 0.25, 0.3536, 0.875, 0.75 },{ -0, 0.5, -0, 1, 0.5 },{ -0, 0.3536, 0.3536, 1, 0.75 },
	{ -0, 0.5, -0, 0, 0.5 },{ -0, 0.3536, -0.3536, 0, 0.25 },{ -0.25, 0.25, -0.3536, 0.125, 0.25 },
	{ -0, 0.5, -0, 0, 0.5 },{ -0.25, 0.25, -0.3536, 0.125, 0.25 },{ -0.3536, 0.3536, -0, 0.125, 0.5 },
	{ -0.3536, 0.3536, -0, 0.125, 0.5 },{ -0.25, 0.25, -0.3536, 0.125, 0.25 },{ -0.3536, -0, -0.3536, 0.25, 0.25 },
	{ -0.3536, 0.3536, -0, 0.125, 0.5 },{ -0.3536, -0, -0.3536, 0.25, 0.25 },{ -0.5, -0, -0, 0.25, 0.5 },
	{ -0.5, -0, -0, 0.25, 0.5 },{ -0.3536, -0, -0.3536, 0.25, 0.25 },{ -0.25, -0.25, -0.3536, 0.375, 0.25 },
	{ -0.5, -0, -0, 0.25, 0.5 },{ -0.25, -0.25, -0.3536, 0.375, 0.25 },{ -0.3536, -0.3536, -0, 0.375, 0.5 },
	{ -0.3536, -0.3536, -0, 0.375, 0.5 },{ -0.25, -0.25, -0.3536, 0.375, 0.25 },{ 0, -0.3536, -0.3536, 0.5, 0.25 },
	{ -0.3536, -0.3536, -0, 0.375, 0.5 },{ 0, -0.3536, -0.3536, 0.5, 0.25 },{ 0, -0.5, -0, 0.5, 0.5 },
	{ 0, -0.5, -0, 0.5, 0.5 },{ 0, -0.3536, -0.3536, 0.5, 0.25 },{ 0.25, -0.25, -0.3536, 0.625, 0.25 },
	{ 0, -0.5, -0, 0.5, 0.5 },{ 0.25, -0.25, -0.3536, 0.625, 0.25 },{ 0.3536, -0.3536, -0, 0.625, 0.5 },
	{ 0.3536, -0.3536, -0, 0.625, 0.5 },{ 0.25, -0.25, -0.3536, 0.625, 0.25 },{ 0.3536, -0, -0.3536, 0.75, 0.25 },
	{ 0.3536, -0.3536, -0, 0.625, 0.5 },{ 0.3536, -0, -0.3536, 0.75, 0.25 },{ 0.5, -0, -0, 0.75, 0.5 },
	{ 0.5, -0, -0, 0.75, 0.5 },{ 0.3536, -0, -0.3536, 0.75, 0.25 },{ 0.25, 0.25, -0.3536, 0.875, 0.25 },
	{ 0.5, -0, -0, 0.75, 0.5 },{ 0.25, 0.25, -0.3536, 0.875, 0.25 },{ 0.3536, 0.3536, -0, 0.875, 0.5 },
	{ 0.3536, 0.3536, -0, 0.875, 0.5 },{ 0.25, 0.25, -0.3536, 0.875, 0.25 },{ -0, 0.3536, -0.3536, 1, 0.25 },
	{ 0.3536, 0.3536, -0, 0.875, 0.5 },{ -0, 0.3536, -0.3536, 1, 0.25 },{ -0, 0.5, -0, 1, 0.5 },
	{ 0, 0, -0.5, 0, 0 },{ -0.25, 0.25, -0.3536, 0.125, 0.25 },{ -0, 0.3536, -0.3536, 0, 0.25 },
	{ 0, 0, -0.5, 0.125, 0 },{ -0.3536, -0, -0.3536, 0.25, 0.25 },{ -0.25, 0.25, -0.3536, 0.125, 0.25 },
	{ 0, 0, -0.5, 0.25, 0 },{ -0.25, -0.25, -0.3536, 0.375, 0.25 },{ -0.3536, -0, -0.3536, 0.25, 0.25 },
	{ 0, 0, -0.5, 0.375, 0 },{ 0, -0.3536, -0.3536, 0.5, 0.25 },{ -0.25, -0.25, -0.3536, 0.375, 0.25 },
	{ 0, 0, -0.5, 0.5, 0 },{ 0.25, -0.25, -0.3536, 0.625, 0.25 },{ 0, -0.3536, -0.3536, 0.5, 0.25 },
	{ 0, 0, -0.5, 0.625, 0 },{ 0.3536, -0, -0.3536, 0.75, 0.25 },{ 0.25, -0.25, -0.3536, 0.625, 0.25 },
	{ 0, 0, -0.5, 0.75, 0 },{ 0.25, 0.25, -0.3536, 0.875, 0.25 },{ 0.3536, -0, -0.3536, 0.75, 0.25 },
	{ 0, 0, -0.5, 0.875, 0 },{ -0, 0.3536, -0.3536, 1, 0.25 },{ 0.25, 0.25, -0.3536, 0.875, 0.25 }
}

trianglelist.cube = {
	{ -0.5, -0.5, -0.5, 1, 0 },{ -0.5, 0.5, -0.5, 1, 1 },{ 0.5, 0.5, -0.5, 0, 1 },
	{ 0.5, 0.5, -0.5, 0, 1 },{ 0.5, -0.5, -0.5, 0, 0 },{ -0.5, -0.5, -0.5, 1, 0 },
	{ -0.5, -0.5, 0.5, 0, 0 },{ 0.5, -0.5, 0.5, 1, 0 },{ 0.5, 0.5, 0.5, 1, 1 },
	{ 0.5, 0.5, 0.5, 1, 1 },{ -0.5, 0.5, 0.5, 0, 1 },{ -0.5, -0.5, 0.5, 0, 0 },
	{ -0.5, -0.5, -0.5, 0, 0 },{ 0.5, -0.5, -0.5, 1, 0 },{ 0.5, -0.5, 0.5, 1, 1 },
	{ 0.5, -0.5, 0.5, 1, 1 },{ -0.5, -0.5, 0.5, 0, 1 },{ -0.5, -0.5, -0.5, 0, 0 },
	{ 0.5, -0.5, -0.5, 0, 0 },{ 0.5, 0.5, -0.5, 1, 0 },{ 0.5, 0.5, 0.5, 1, 1 },
	{ 0.5, 0.5, 0.5, 1, 1 },{ 0.5, -0.5, 0.5, 0, 1 },{ 0.5, -0.5, -0.5, 0, 0 },
	{ 0.5, 0.5, -0.5, 0, 0 },{ -0.5, 0.5, -0.5, 1, 0 },{ -0.5, 0.5, 0.5, 1, 1 },
	{ -0.5, 0.5, 0.5, 1, 1 },{ 0.5, 0.5, 0.5, 0, 1 },{ 0.5, 0.5, -0.5, 0, 0 },
	{ -0.5, 0.5, -0.5, 0, 0 },{ -0.5, -0.5, -0.5, 1, 0 },{ -0.5, -0.5, 0.5, 1, 1 },
	{ -0.5, -0.5, 0.5, 1, 1 },{ -0.5, 0.5, 0.5, 0, 1 },{ -0.5, 0.5, -0.5, 0, 0 }
}


trianglelist.plane = {
	{ -0.5, 0.5, 0, 0, 1 },{ -0.5, -0.5, 0, 0, 0 },{ 0.5, 0.5, 0, 1, 1 },
	{ 0.5, -0.5, 0, 1, 0 },{ 0.5, 0.5, 0, 1, 1 },{ -0.5, -0.5, 0, 0, 0 }
}

---------------------------------------------------------------------------------------------------
-- dxGetStatus
---------------------------------------------------------------------------------------------------
isSM3DBSupported = (tonumber(dxGetStatus().VideoCardPSVersion) > 2) and (tostring(dxGetStatus().DepthBufferFormat) ~= "unknown")

isSm3MrtDBSupported = (tonumber(dxGetStatus().VideoCardPSVersion) > 2) and (tonumber(dxGetStatus().VideoCardNumRenderTargets) > 1) and 
		(tostring(dxGetStatus().DepthBufferFormat) ~= "unknown") 

---------------------------------------------------------------------------------------------------
-- check if element is drawn in front of cam plane
---------------------------------------------------------------------------------------------------
localCamera = {}
addEventHandler("onClientPreRender", getRootElement(), function()
	localCamera.mat = getCamera().matrix
	localCamera.pos = getCamera().position
	localCamera.fw = localCamera.mat.forward
	localCamera.farClipFront = localCamera.pos + (localCamera.mat.forward * getFarClipDistance())
	localCamera.farClipDistance = getFarClipDistance()
end, true, "high+20" )

function isEntityInCameraFront(pos, rads)
	if localCamera.fw:dot(pos - localCamera.pos) > -rads then
		return true
	else
		return false
	end
end

function isEntityInFrontalSphere(pos, rads)
	if (localCamera.farClipFront - pos).length < localCamera.farClipDistance + rads then
		return true
	else
		return false
	end
end	
		
---------------------------------------------------------------------------------------------------
-- getRenderTargets
---------------------------------------------------------------------------------------------------
renderTarget = {RTColor = nil, RTNormal = nil, isOn = false, distFade = {100, 80}}
local rtResource = exports.dl_core
local rtResourceName = "dl_core"
local scx, scy = guiGetScreenSize ()

---------------------------------------------------------------------------------------------------
-- onClientResourceStart/Stop
---------------------------------------------------------------------------------------------------
addEventHandler ( "onClientResourceStart", root, function(startedRes)
	if getResourceName(startedRes) == rtResourceName then
		renderTarget.isOn = getElementData ( localPlayer, "dl_core.on", false )
		if renderTarget.isOn then
			renderTarget.RTColor, renderTarget.RTNormal = rtResource:getRenderTargets()
			return 
		end
		if renderTarget.RTColor and renderTarget.RTNormal then
			renderTarget.isOn = true
		end
	end
end
)

addEventHandler ( "onClientResourceStop", root, function(startedRes)
	if not renderTarget.isOn then return end
	if getResourceName(startedRes) == rtResourceName then
		if renderTarget.isOn then
			renderTarget.isOn = false
		end
	end
end
)

addEventHandler ( "onClientResourceStart", resourceRoot, function()
	renderTarget.isOn = getElementData ( localPlayer, "dl_core.on", false )
	if renderTarget.isOn then 
		renderTarget.RTColor, renderTarget.RTNormal = rtResource:getRenderTargets()
		if renderTarget.RTColor and renderTarget.RTNormal then
			renderTarget.isOn = true
		end
	end
	triggerEvent( "onClientSwitchDetail", resourceRoot, true )
end
)

---------------------------------------------------------------------------------------------------
-- prevent memory leaks
---------------------------------------------------------------------------------------------------
addEventHandler( "onClientResourceStart", resourceRoot, function()
	collectgarbage( "setpause", 100 )
end
)
	
---------------------------------------------------------------------------------------------------
-- find empty entry
---------------------------------------------------------------------------------------------------
function findEmptyEntry(inTable)
	for index,value in ipairs(inTable) do
		if not value.enabled then
			return index
		end
	end
	return #inTable + 1
end

---------------------------------------------------------------------------------------------------
-- the interval between this frame and the previous one in milliseconds (delta time).
---------------------------------------------------------------------------------------------------
currentFPS, lastFrameTickCount = 0, 0
addEventHandler("onClientPreRender", root, function(msSinceLastFrame)
	currentFPS = (1 / msSinceLastFrame) * 1000
	lastFrameTickCount = msSinceLastFrame
end
)

